// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Box2D
@_exported import Box2D
import Foundation
import Swift
import UIKit
@_hasMissingDesignatedInitializers open class b2EdgeAndCircleContact : Box2D.b2Contact {
  override open func evaluate(_ manifold: inout Box2D.b2Manifold, _ xfA: Box2D.b2Transform, _ xfB: Box2D.b2Transform)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2ContactManager : Box2D.b2BroadPhaseWrapper {
  open func addPair(_ proxyUserDataA: inout Box2D.b2FixtureProxy, _ proxyUserDataB: inout Box2D.b2FixtureProxy)
  open var broadPhase: Box2D.b2BroadPhase {
    get
  }
  @objc deinit
}
public func b2Locally(_ work: () -> ())
open class b2World {
  public init(gravity: Box2D.b2Vec2)
  @objc deinit
  open func setDestructionListener(_ listener: Box2D.b2DestructionListener)
  open func setContactFilter(_ filter: Box2D.b2ContactFilter)
  open func setContactListener(_ listener: Box2D.b2ContactListener)
  open func setDebugDraw(_ debugDraw: Box2D.b2Draw)
  open func createBody(_ def: Box2D.b2BodyDef) -> Box2D.b2Body
  open func destroyBody(_ b: Box2D.b2Body)
  @discardableResult
  open func createJoint(_ def: Box2D.b2JointDef) -> Box2D.b2Joint
  @discardableResult
  open func createJoint(_ def: Box2D.b2DistanceJointDef) -> Box2D.b2DistanceJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2MouseJointDef) -> Box2D.b2MouseJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2PrismaticJointDef) -> Box2D.b2PrismaticJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2RevoluteJointDef) -> Box2D.b2RevoluteJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2PulleyJointDef) -> Box2D.b2PulleyJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2GearJointDef) -> Box2D.b2GearJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2WheelJointDef) -> Box2D.b2WheelJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2WeldJointDef) -> Box2D.b2WeldJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2FrictionJointDef) -> Box2D.b2FrictionJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2RopeJointDef) -> Box2D.b2RopeJoint
  @discardableResult
  open func createJoint(_ def: Box2D.b2MotorJointDef) -> Box2D.b2MotorJoint
  open func destroyJoint(_ j: Box2D.b2Joint)
  open func step(timeStep dt: Box2D.b2Float, velocityIterations: Swift.Int, positionIterations: Swift.Int)
  open func clearForces()
  open func drawDebugData()
  open func queryAABB(callback: Box2D.b2QueryCallback, aabb: Box2D.b2AABB)
  open func queryAABB(_ aabb: Box2D.b2AABB, callback: @escaping Box2D.b2QueryCallbackFunction)
  open func rayCast(callback: Box2D.b2RayCastCallback, point1: Box2D.b2Vec2, point2: Box2D.b2Vec2)
  open func rayCast(_ point1: Box2D.b2Vec2, point2: Box2D.b2Vec2, callback: @escaping Box2D.b2RayCastCallbackFunction)
  open func getBodyList() -> Box2D.b2Body?
  open func getJointList() -> Box2D.b2Joint?
  open func getContactList() -> Box2D.b2Contact?
  open func setAllowSleeping(_ flag: Swift.Bool)
  open var allowSleeping: Swift.Bool {
    get
    set(newValue)
  }
  open func setWarmStarting(_ flag: Swift.Bool)
  open var warmStarting: Swift.Bool {
    get
    set(newValue)
  }
  open func setContinuousPhysics(_ flag: Swift.Bool)
  open var continuousPhysics: Swift.Bool {
    get
    set(newValue)
  }
  open func setSubStepping(_ flag: Swift.Bool)
  open var subStepping: Swift.Bool {
    get
    set(newValue)
  }
  open var proxyCount: Swift.Int {
    get
  }
  open var bodyCount: Swift.Int {
    get
  }
  open var jointCount: Swift.Int {
    get
  }
  open var contactCount: Swift.Int {
    get
  }
  open var treeHeight: Swift.Int {
    get
  }
  open var treeBalance: Swift.Int {
    get
  }
  open var treeQuality: Box2D.b2Float {
    get
  }
  open func setGravity(_ gravity: Box2D.b2Vec2)
  open var gravity: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  open var isLocked: Swift.Bool {
    get
  }
  open func setAutoClearForces(_ flag: Swift.Bool)
  open var autoClearForces: Swift.Bool {
    get
  }
  open func shiftOrigin(_ newOrigin: Box2D.b2Vec2)
  open var contactManager: Box2D.b2ContactManager {
    get
  }
  open var profile: Box2D.b2Profile {
    get
  }
  open func dump()
}
@_inheritsConvenienceInitializers open class b2MouseJointDef : Box2D.b2JointDef {
  override public init()
  open var target: Box2D.b2Vec2
  open var maxForce: Box2D.b2Float
  open var frequencyHz: Box2D.b2Float
  open var dampingRatio: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2MouseJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open func setTarget(_ target: Box2D.b2Vec2)
  open var target: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  open func setMaxForce(_ force: Box2D.b2Float)
  open var maxForce: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setFrequency(_ hz: Box2D.b2Float)
  open var frequency: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setDampingRatio(_ ratio: Box2D.b2Float)
  open var dampingRatio: Box2D.b2Float {
    get
    set(newValue)
  }
  override open func dump()
  override open func shiftOrigin(_ newOrigin: Box2D.b2Vec2)
  @objc deinit
}
public typealias b2Float = Swift.Float32
public struct b2Vec2 : Swift.Equatable, Swift.CustomStringConvertible {
  public init()
  public init(_ x_: Box2D.b2Float, _ y_: Box2D.b2Float)
  public mutating func setZero()
  public mutating func set(_ x_: Box2D.b2Float, _ y_: Box2D.b2Float)
  public subscript(index: Swift.Int) -> Box2D.b2Float {
    get
    set(newValue)
  }
  public func length() -> Box2D.b2Float
  public func lengthSquared() -> Box2D.b2Float
  @discardableResult
  public mutating func normalize() -> Box2D.b2Float
  public func isValid() -> Swift.Bool
  public func skew() -> Box2D.b2Vec2
  public var description: Swift.String {
    get
  }
  public var x: Box2D.b2Float
  public var y: Box2D.b2Float
}
prefix public func - (v: Box2D.b2Vec2) -> Box2D.b2Vec2
public func += (a: inout Box2D.b2Vec2, b: Box2D.b2Vec2)
public func -= (a: inout Box2D.b2Vec2, b: Box2D.b2Vec2)
public func *= (a: inout Box2D.b2Vec2, b: Box2D.b2Vec2)
public func *= (a: inout Box2D.b2Vec2, b: Box2D.b2Float)
public struct b2Vec3 : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
prefix public func - (v: Box2D.b2Vec3) -> Box2D.b2Vec3
public func += (a: inout Box2D.b2Vec3, b: Box2D.b2Vec3)
public func -= (a: inout Box2D.b2Vec3, b: Box2D.b2Vec3)
public func *= (a: inout Box2D.b2Vec3, b: Box2D.b2Vec3)
public func *= (a: inout Box2D.b2Vec3, b: Box2D.b2Float)
public struct b2Mat22 : Swift.CustomStringConvertible {
  public init()
  public init(_ c1: Box2D.b2Vec2, _ c2: Box2D.b2Vec2)
  public init(_ a11: Box2D.b2Float, _ a12: Box2D.b2Float, _ a21: Box2D.b2Float, _ a22: Box2D.b2Float)
  public mutating func set(_ c1: Box2D.b2Vec2, _ c2: Box2D.b2Vec2)
  public mutating func setIdentity()
  public mutating func setZero()
  public func getInverse() -> Box2D.b2Mat22
  public func solve(_ b: Box2D.b2Vec2) -> Box2D.b2Vec2
  public var description: Swift.String {
    get
  }
  public var ex: Box2D.b2Vec2
  public var ey: Box2D.b2Vec2
}
public struct b2Mat33 : Swift.CustomStringConvertible {
  public init()
  public init(_ c1: Box2D.b2Vec3, _ c2: Box2D.b2Vec3, _ c3: Box2D.b2Vec3)
  public mutating func setZero()
  public func solve33(_ b: Box2D.b2Vec3) -> Box2D.b2Vec3
  public func solve22(_ b: Box2D.b2Vec2) -> Box2D.b2Vec2
  public func getInverse22() -> Box2D.b2Mat33
  public func getSymInverse33() -> Box2D.b2Mat33
  public var description: Swift.String {
    get
  }
  public var ex: Box2D.b2Vec3
  public var ey: Box2D.b2Vec3
  public var ez: Box2D.b2Vec3
}
public struct b2Rot : Swift.CustomStringConvertible {
  public init()
  public init(_ angle: Box2D.b2Float)
  public mutating func set(_ angle: Box2D.b2Float)
  public mutating func setIdentity()
  public var angle: Box2D.b2Float {
    get
  }
  public var xAxis: Box2D.b2Vec2 {
    get
  }
  public var yAxis: Box2D.b2Vec2 {
    get
  }
  public var description: Swift.String {
    get
  }
  public var s: Box2D.b2Float
  public var c: Box2D.b2Float
}
public struct b2Transform : Swift.CustomStringConvertible {
  public init()
  public init(position: Box2D.b2Vec2, rotation: Box2D.b2Rot)
  public mutating func setIdentity()
  public mutating func set(_ position: Box2D.b2Vec2, angle: Box2D.b2Float)
  public var description: Swift.String {
    get
  }
  public var p: Box2D.b2Vec2
  public var q: Box2D.b2Rot
}
public struct b2Sweep : Swift.CustomStringConvertible {
  public init()
  public func getTransform(beta: Box2D.b2Float) -> Box2D.b2Transform
  public mutating func advance(alpha: Box2D.b2Float)
  public mutating func normalize()
  public var description: Swift.String {
    get
  }
  public var localCenter: Box2D.b2Vec2
  public var m_c0: Box2D.b2Vec2
  public var c0: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  public var c: Box2D.b2Vec2
  public var a0: Box2D.b2Float, a: Box2D.b2Float
  public var alpha0: Box2D.b2Float
}
public var b2Vec2_zero: Box2D.b2Vec2
public func b2Dot(_ a: Box2D.b2Vec2, _ b: Box2D.b2Vec2) -> Box2D.b2Float
public func b2Cross(_ a: Box2D.b2Vec2, _ b: Box2D.b2Vec2) -> Box2D.b2Float
public func b2Cross(_ a: Box2D.b2Vec2, _ s: Box2D.b2Float) -> Box2D.b2Vec2
public func b2Cross(_ s: Box2D.b2Float, _ a: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2Mul(_ A: Box2D.b2Mat22, _ v: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2MulT(_ A: Box2D.b2Mat22, _ v: Box2D.b2Vec2) -> Box2D.b2Vec2
public func + (a: Box2D.b2Vec2, b: Box2D.b2Vec2) -> Box2D.b2Vec2
public func - (a: Box2D.b2Vec2, b: Box2D.b2Vec2) -> Box2D.b2Vec2
public func * (s: Box2D.b2Float, a: Box2D.b2Vec2) -> Box2D.b2Vec2
public func == (a: Box2D.b2Vec2, b: Box2D.b2Vec2) -> Swift.Bool
public func b2Distance(_ a: Box2D.b2Vec2, _ b: Box2D.b2Vec2) -> Box2D.b2Float
public func b2DistanceSquared(_ a: Box2D.b2Vec2, _ b: Box2D.b2Vec2) -> Box2D.b2Float
public func * (s: Box2D.b2Float, a: Box2D.b2Vec3) -> Box2D.b2Vec3
public func + (a: Box2D.b2Vec3, b: Box2D.b2Vec3) -> Box2D.b2Vec3
public func - (a: Box2D.b2Vec3, b: Box2D.b2Vec3) -> Box2D.b2Vec3
public func b2Dot(_ a: Box2D.b2Vec3, _ b: Box2D.b2Vec3) -> Box2D.b2Float
public func b2Cross(_ a: Box2D.b2Vec3, _ b: Box2D.b2Vec3) -> Box2D.b2Vec3
public func + (A: Box2D.b2Mat22, B: Box2D.b2Mat22) -> Box2D.b2Mat22
public func b2Mul(_ A: Box2D.b2Mat22, _ B: Box2D.b2Mat22) -> Box2D.b2Mat22
public func b2MulT(_ A: Box2D.b2Mat22, _ B: Box2D.b2Mat22) -> Box2D.b2Mat22
public func b2Mul(_ A: Box2D.b2Mat33, _ v: Box2D.b2Vec3) -> Box2D.b2Vec3
public func b2Mul22(_ A: Box2D.b2Mat33, _ v: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2Mul(_ q: Box2D.b2Rot, _ r: Box2D.b2Rot) -> Box2D.b2Rot
public func b2MulT(_ q: Box2D.b2Rot, _ r: Box2D.b2Rot) -> Box2D.b2Rot
public func b2Mul(_ q: Box2D.b2Rot, _ v: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2MulT(_ q: Box2D.b2Rot, _ v: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2Mul(_ T: Box2D.b2Transform, _ v: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2MulT(_ T: Box2D.b2Transform, _ v: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2Mul(_ A: Box2D.b2Transform, _ B: Box2D.b2Transform) -> Box2D.b2Transform
public func b2MulT(_ A: Box2D.b2Transform, _ B: Box2D.b2Transform) -> Box2D.b2Transform
public func b2Abs(_ a: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2Abs(_ A: Box2D.b2Mat22) -> Box2D.b2Mat22
public func b2Min(_ a: Box2D.b2Vec2, _ b: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2Max(_ a: Box2D.b2Vec2, _ b: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2Clamp(_ a: Box2D.b2Float, _ low: Box2D.b2Float, _ high: Box2D.b2Float) -> Box2D.b2Float
public func b2Clamp(_ a: Box2D.b2Vec2, _ low: Box2D.b2Vec2, _ high: Box2D.b2Vec2) -> Box2D.b2Vec2
public func b2NextPowerOfTwo(_ _x: Swift.UInt) -> Swift.UInt
public func b2IsPowerOfTwo(_ x: Swift.UInt) -> Swift.Bool
@_inheritsConvenienceInitializers open class b2GearJointDef : Box2D.b2JointDef {
  override public init()
  open var joint1: Box2D.b2Joint!
  open var joint2: Box2D.b2Joint!
  open var ratio: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2GearJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open var joint1: Box2D.b2Joint {
    get
  }
  open var joint2: Box2D.b2Joint {
    get
  }
  open func setRatio(_ ratio: Box2D.b2Float)
  open var ratio: Box2D.b2Float {
    get
    set(newValue)
  }
  override open func dump()
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2DistanceJointDef : Box2D.b2JointDef {
  override public init()
  public convenience init(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, anchorA: Box2D.b2Vec2, anchorB: Box2D.b2Vec2)
  open func initialize(bodyA bA: Box2D.b2Body, bodyB bB: Box2D.b2Body, anchorA: Box2D.b2Vec2, anchorB: Box2D.b2Vec2)
  open var localAnchorA: Box2D.b2Vec2
  open var localAnchorB: Box2D.b2Vec2
  open var length: Box2D.b2Float
  open var frequencyHz: Box2D.b2Float
  open var dampingRatio: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2DistanceJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open var localAnchorA: Box2D.b2Vec2 {
    get
  }
  open var localAnchorB: Box2D.b2Vec2 {
    get
  }
  open func setLength(_ length: Box2D.b2Float)
  open var length: Box2D.b2Float {
    get
  }
  open func setFrequency(_ hz: Box2D.b2Float)
  open var frequency: Box2D.b2Float {
    get
  }
  open func setDampingRatio(_ ratio: Box2D.b2Float)
  open var dampingRatio: Box2D.b2Float {
    get
  }
  override open func dump()
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2WeldJointDef : Box2D.b2JointDef {
  override public init()
  public convenience init(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, anchor: Box2D.b2Vec2)
  open func initialize(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, anchor: Box2D.b2Vec2)
  open var localAnchorA: Box2D.b2Vec2
  open var localAnchorB: Box2D.b2Vec2
  open var referenceAngle: Box2D.b2Float
  open var frequencyHz: Box2D.b2Float
  open var dampingRatio: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2WeldJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open var localAnchorA: Box2D.b2Vec2 {
    get
  }
  open var localAnchorB: Box2D.b2Vec2 {
    get
  }
  open var referenceAngle: Box2D.b2Float {
    get
  }
  open func setFrequency(_ hz: Box2D.b2Float)
  open var frequency: Box2D.b2Float {
    get
  }
  open func setDampingRatio(_ ratio: Box2D.b2Float)
  open var dampingRatio: Box2D.b2Float {
    get
  }
  override open func dump()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class b2ChainAndCircleContact : Box2D.b2Contact {
  override open func evaluate(_ manifold: inout Box2D.b2Manifold, _ xfA: Box2D.b2Transform, _ xfB: Box2D.b2Transform)
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2WheelJointDef : Box2D.b2JointDef {
  override public init()
  public convenience init(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, anchor: Box2D.b2Vec2, axis: Box2D.b2Vec2)
  open func initialize(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, anchor: Box2D.b2Vec2, axis: Box2D.b2Vec2)
  open var localAnchorA: Box2D.b2Vec2
  open var localAnchorB: Box2D.b2Vec2
  open var localAxisA: Box2D.b2Vec2
  open var enableMotor: Swift.Bool
  open var maxMotorTorque: Box2D.b2Float
  open var motorSpeed: Box2D.b2Float
  open var frequencyHz: Box2D.b2Float
  open var dampingRatio: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2WheelJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open var localAnchorA: Box2D.b2Vec2 {
    get
  }
  open var localAnchorB: Box2D.b2Vec2 {
    get
  }
  open var localAxisA: Box2D.b2Vec2 {
    get
  }
  open var jointTranslation: Box2D.b2Float {
    get
  }
  open var jointSpeed: Box2D.b2Float {
    get
  }
  open var isMotorEnabled: Swift.Bool {
    get
    set(newValue)
  }
  open func enableMotor(_ flag: Swift.Bool)
  open func setMotorSpeed(_ speed: Box2D.b2Float)
  open var motorSpeed: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setMaxMotorTorque(_ torque: Box2D.b2Float)
  open var maxMotorTorque: Box2D.b2Float {
    get
    set(newValue)
  }
  open func getMotorTorque(inverseTimeStamp inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open func setSpringFrequencyHz(_ hz: Box2D.b2Float)
  open var springFrequencyHz: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setSpringDampingRatio(_ ratio: Box2D.b2Float)
  open var springDampingRatio: Box2D.b2Float {
    get
    set(newValue)
  }
  override open func dump()
  @objc deinit
}
public enum b2JointType : Swift.CustomStringConvertible {
  case unknownJoint
  case revoluteJoint
  case prismaticJoint
  case distanceJoint
  case pulleyJoint
  case mouseJoint
  case gearJoint
  case wheelJoint
  case weldJoint
  case frictionJoint
  case ropeJoint
  case motorJoint
  public var description: Swift.String {
    get
  }
  public static func == (a: Box2D.b2JointType, b: Box2D.b2JointType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum b2LimitState : Swift.CustomStringConvertible {
  case inactiveLimit
  case atLowerLimit
  case atUpperLimit
  case equalLimits
  public var description: Swift.String {
    get
  }
  public static func == (a: Box2D.b2LimitState, b: Box2D.b2LimitState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct b2Jacobian {
}
@_hasMissingDesignatedInitializers open class b2JointEdge {
  @objc deinit
}
open class b2JointDef {
  public init()
  open var type: Box2D.b2JointType
  open var userData: Swift.AnyObject?
  open var bodyA: Box2D.b2Body!
  open var bodyB: Box2D.b2Body!
  open var collideConnected: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2Joint {
  open var type: Box2D.b2JointType {
    get
  }
  open var bodyA: Box2D.b2Body {
    get
  }
  open var bodyB: Box2D.b2Body {
    get
  }
  open var anchorA: Box2D.b2Vec2 {
    get
  }
  open var anchorB: Box2D.b2Vec2 {
    get
  }
  open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open func getNext() -> Box2D.b2Joint?
  open var userData: Swift.AnyObject? {
    get
    set(newValue)
  }
  open func setUserData(_ data: Swift.AnyObject?)
  open var isActive: Swift.Bool {
    get
  }
  open var collideConnected: Swift.Bool {
    get
  }
  open func dump()
  open func shiftOrigin(_ newOrigin: Box2D.b2Vec2)
  @objc deinit
}
public var b2_nullNode: Swift.Int
@_hasMissingDesignatedInitializers open class b2TreeNode<T> : Swift.CustomStringConvertible {
  open var aabb: Box2D.b2AABB
  open var userData: T?
  open var description: Swift.String {
    get
  }
  @objc deinit
}
open class b2DynamicTree<T> : Swift.CustomStringConvertible {
  public init()
  @objc deinit
  open func createProxy(aabb: Box2D.b2AABB, userData: T?) -> Swift.Int
  open func destroyProxy(_ proxyId: Swift.Int)
  open func moveProxy(_ proxyId: Swift.Int, aabb: Box2D.b2AABB, displacement: Box2D.b2Vec2) -> Swift.Bool
  open func getUserData(_ proxyId: Swift.Int) -> T?
  open func getFatAABB(_ proxyId: Swift.Int) -> Box2D.b2AABB
  open func query<T>(callback: T, aabb: Box2D.b2AABB) where T : Box2D.b2QueryWrapper
  open func rayCast<T>(callback: T, input: Box2D.b2RayCastInput) where T : Box2D.b2RayCastWrapper
  open func validate()
  open func getHeight() -> Swift.Int
  open func getMaxBalance() -> Swift.Int
  open func getAreaRatio() -> Box2D.b2Float
  open func rebuildBottomUp()
  open func shiftOrigin(_ newOrigin: Box2D.b2Vec2)
  open var description: Swift.String {
    get
  }
}
public func b2CollideEdgeAndCircle(manifold: inout Box2D.b2Manifold, edgeA: Box2D.b2EdgeShape, transformA xfA: Box2D.b2Transform, circleB: Box2D.b2CircleShape, transformB xfB: Box2D.b2Transform)
public func b2CollideEdgeAndPolygon(manifold: inout Box2D.b2Manifold, edgeA: Box2D.b2EdgeShape, transformA xfA: Box2D.b2Transform, polygonB: Box2D.b2PolygonShape, transformB xfB: Box2D.b2Transform)
public struct b2RopeDef {
}
@_hasMissingDesignatedInitializers open class b2Rope {
  @objc deinit
}
public func b2CollidePolygons(manifold: inout Box2D.b2Manifold, polygonA polyA: Box2D.b2PolygonShape, transformA xfA: Box2D.b2Transform, polygonB polyB: Box2D.b2PolygonShape, transformB xfB: Box2D.b2Transform)
@_hasMissingDesignatedInitializers open class b2PolygonContact : Box2D.b2Contact {
  override open func evaluate(_ manifold: inout Box2D.b2Manifold, _ xfA: Box2D.b2Transform, _ xfB: Box2D.b2Transform)
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2ChainShape : Box2D.b2Shape {
  override public init()
  open func createLoop(vertices: [Box2D.b2Vec2])
  open func createChain(vertices: [Box2D.b2Vec2])
  open func setPrevVertex(_ prevVertex: Box2D.b2Vec2)
  open func setNextVertex(_ nextVertex: Box2D.b2Vec2)
  override open func clone() -> Box2D.b2Shape
  override open var childCount: Swift.Int {
    get
  }
  open func getChildEdge(_ index: Swift.Int) -> Box2D.b2EdgeShape
  override open func testPoint(transform: Box2D.b2Transform, point: Box2D.b2Vec2) -> Swift.Bool
  override open func rayCast(_ output: inout Box2D.b2RayCastOutput, input: Box2D.b2RayCastInput, transform xf: Box2D.b2Transform, childIndex: Swift.Int) -> Swift.Bool
  override open func computeAABB(_ aabb: inout Box2D.b2AABB, transform: Box2D.b2Transform, childIndex: Swift.Int)
  override open func computeMass(density: Box2D.b2Float) -> Box2D.b2MassData
  @objc deinit
}
public func b2CollideCircles(manifold: inout Box2D.b2Manifold, circleA: Box2D.b2CircleShape, transformA xfA: Box2D.b2Transform, circleB: Box2D.b2CircleShape, transformB xfB: Box2D.b2Transform)
public func b2CollidePolygonAndCircle(manifold: inout Box2D.b2Manifold, polygonA: Box2D.b2PolygonShape, transformA xfA: Box2D.b2Transform, circleB: Box2D.b2CircleShape, transformB xfB: Box2D.b2Transform)
@_hasMissingDesignatedInitializers open class b2Island {
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2PrismaticJointDef : Box2D.b2JointDef {
  override public init()
  public convenience init(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, anchor: Box2D.b2Vec2, axis: Box2D.b2Vec2)
  open func initialize(bodyA bA: Box2D.b2Body, bodyB bB: Box2D.b2Body, anchor: Box2D.b2Vec2, axis: Box2D.b2Vec2)
  open var localAnchorA: Box2D.b2Vec2
  open var localAnchorB: Box2D.b2Vec2
  open var localAxisA: Box2D.b2Vec2
  open var referenceAngle: Box2D.b2Float
  open var enableLimit: Swift.Bool
  open var lowerTranslation: Box2D.b2Float
  open var upperTranslation: Box2D.b2Float
  open var enableMotor: Swift.Bool
  open var maxMotorForce: Box2D.b2Float
  open var motorSpeed: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2PrismaticJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open var localAnchorA: Box2D.b2Vec2 {
    get
  }
  open var localAnchorB: Box2D.b2Vec2 {
    get
  }
  open var localAxisA: Box2D.b2Vec2 {
    get
  }
  open var referenceAngle: Box2D.b2Float {
    get
  }
  open var jointTranslation: Box2D.b2Float {
    get
  }
  open var jointSpeed: Box2D.b2Float {
    get
  }
  open var isLimitEnabled: Swift.Bool {
    get
    set(newValue)
  }
  open func enableLimit(_ flag: Swift.Bool)
  open var lowerLimit: Box2D.b2Float {
    get
  }
  open var upperLimit: Box2D.b2Float {
    get
  }
  open func setLimits(lower: Box2D.b2Float, upper: Box2D.b2Float)
  open var isMotorEnabled: Swift.Bool {
    get
    set(newValue)
  }
  open func enableMotor(_ flag: Swift.Bool)
  open var motorSpeed: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setMaxMotorForce(_ force: Box2D.b2Float)
  open var maxMotorForce: Box2D.b2Float {
    get
    set(newValue)
  }
  open func getMotorForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  override open func dump()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2VelocityConstraintPoint {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2ContactVelocityConstraint {
  @objc deinit
}
public struct b2ContactSolverDef {
}
@_hasMissingDesignatedInitializers open class b2ContactSolver {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2ContactPositionConstraint {
  @objc deinit
}
public protocol b2QueryWrapper {
  func queryCallback(_ proxyId: Swift.Int) -> Swift.Bool
}
public protocol b2RayCastWrapper {
  func rayCastCallback(_ input: Box2D.b2RayCastInput, _ proxyId: Swift.Int) -> Box2D.b2Float
}
public protocol b2BroadPhaseWrapper {
  func addPair(_ proxyUserDataA: inout Box2D.b2FixtureProxy, _ proxyUserDataB: inout Box2D.b2FixtureProxy)
}
@_inheritsConvenienceInitializers open class b2FrictionJointDef : Box2D.b2JointDef {
  override public init()
  public convenience init(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, anchor: Box2D.b2Vec2)
  open func initialize(bodyA bA: Box2D.b2Body, bodyB bB: Box2D.b2Body, anchor: Box2D.b2Vec2)
  open var localAnchorA: Box2D.b2Vec2
  open var localAnchorB: Box2D.b2Vec2
  open var maxForce: Box2D.b2Float
  open var maxTorque: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2FrictionJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open var localAnchorA: Box2D.b2Vec2 {
    get
  }
  open var localAnchorB: Box2D.b2Vec2 {
    get
  }
  open func setMaxForce(_ force: Box2D.b2Float)
  open var maxForce: Box2D.b2Float {
    get
  }
  open func setMaxTorque(_ torque: Box2D.b2Float)
  open var maxTorque: Box2D.b2Float {
    get
  }
  override open func dump()
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2EdgeShape : Box2D.b2Shape {
  override public init()
  open func set(vertex1 v1: Box2D.b2Vec2, vertex2 v2: Box2D.b2Vec2)
  override open func clone() -> Box2D.b2Shape
  override open var childCount: Swift.Int {
    get
  }
  override open func testPoint(transform: Box2D.b2Transform, point: Box2D.b2Vec2) -> Swift.Bool
  override open func rayCast(_ output: inout Box2D.b2RayCastOutput, input: Box2D.b2RayCastInput, transform xf: Box2D.b2Transform, childIndex: Swift.Int) -> Swift.Bool
  override open func computeAABB(_ aabb: inout Box2D.b2AABB, transform: Box2D.b2Transform, childIndex: Swift.Int)
  override open func computeMass(density: Box2D.b2Float) -> Box2D.b2MassData
  open var vertex1: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  open var vertex2: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  open var vertex0: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  open var vertex3: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  open var hasVertex0: Swift.Bool {
    get
    set(newValue)
  }
  open var hasVertex3: Swift.Bool {
    get
    set(newValue)
  }
  @objc deinit
}
public struct b2Filter {
  public init()
  public var categoryBits: Swift.UInt16
  public var maskBits: Swift.UInt16
  public var groupIndex: Swift.Int16
}
open class b2FixtureDef {
  public init()
  open var shape: Box2D.b2Shape!
  open var userData: Swift.AnyObject?
  open var friction: Box2D.b2Float
  open var restitution: Box2D.b2Float
  open var density: Box2D.b2Float
  open var isSensor: Swift.Bool
  open var filter: Box2D.b2Filter
  @objc deinit
}
public struct b2FixtureProxy {
}
@_hasMissingDesignatedInitializers open class b2Fixture : Swift.CustomStringConvertible {
  open var type: Box2D.b2ShapeType {
    get
  }
  open var shape: Box2D.b2Shape {
    get
  }
  open func setSensor(_ sensor: Swift.Bool)
  open var isSensor: Swift.Bool {
    get
    set(newValue)
  }
  open func setFilterData(_ filter: Box2D.b2Filter)
  open var filterData: Box2D.b2Filter {
    get
    set(newValue)
  }
  open func refilter()
  open var body: Box2D.b2Body {
    get
  }
  open func getNext() -> Box2D.b2Fixture?
  open var userData: Swift.AnyObject? {
    get
    set(newValue)
  }
  open func setUserData(_ data: Swift.AnyObject?)
  open func testPoint(_ p: Box2D.b2Vec2) -> Swift.Bool
  open func rayCast(_ output: inout Box2D.b2RayCastOutput, input: Box2D.b2RayCastInput, childIndex: Swift.Int) -> Swift.Bool
  open var massData: Box2D.b2MassData {
    get
  }
  open func setDensity(_ density: Box2D.b2Float)
  open var density: Box2D.b2Float {
    get
    set(newValue)
  }
  open var friction: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setFriction(_ friction: Box2D.b2Float)
  open var restitution: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setRestitution(_ restitution: Box2D.b2Float)
  open func getAABB(childIndex: Swift.Int) -> Box2D.b2AABB
  open func dump(_ bodyIndex: Swift.Int)
  open var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2CircleShape : Box2D.b2Shape {
  override public init()
  override open func clone() -> Box2D.b2Shape
  override open var childCount: Swift.Int {
    get
  }
  override open func testPoint(transform: Box2D.b2Transform, point: Box2D.b2Vec2) -> Swift.Bool
  override open func rayCast(_ output: inout Box2D.b2RayCastOutput, input: Box2D.b2RayCastInput, transform: Box2D.b2Transform, childIndex: Swift.Int) -> Swift.Bool
  override open func computeAABB(_ aabb: inout Box2D.b2AABB, transform: Box2D.b2Transform, childIndex: Swift.Int)
  override open func computeMass(density: Box2D.b2Float) -> Box2D.b2MassData
  open func getSupport(direction: Box2D.b2Vec2) -> Swift.Int
  open func getSupportVertex(direction: Box2D.b2Vec2) -> Box2D.b2Vec2
  open var vertexCount: Swift.Int {
    get
  }
  open func vertex(index: Swift.Int) -> Box2D.b2Vec2
  open var p: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  @objc deinit
}
public struct b2Pair : Swift.CustomStringConvertible {
  public var proxyIdA: Swift.Int
  public var proxyIdB: Swift.Int
  public var description: Swift.String {
    get
  }
}
open class b2BroadPhase : Box2D.b2QueryWrapper {
  public struct Const {
    public static var nullProxy: Swift.Int
  }
  public init()
  open func createProxy(aabb: Box2D.b2AABB, userData: Box2D.b2FixtureProxy) -> Swift.Int
  open func destroyProxy(_ proxyId: Swift.Int)
  open func moveProxy(_ proxyId: Swift.Int, aabb: Box2D.b2AABB, displacement: Box2D.b2Vec2)
  open func touchProxy(_ proxyId: Swift.Int)
  open func getFatAABB(proxyId: Swift.Int) -> Box2D.b2AABB
  open func getUserData(proxyId: Swift.Int) -> Box2D.b2FixtureProxy?
  open func testOverlap(proxyIdA: Swift.Int, proxyIdB: Swift.Int) -> Swift.Bool
  open func getProxyCount() -> Swift.Int
  open func updatePairs<T>(callback: T) where T : Box2D.b2BroadPhaseWrapper
  open func query<T>(callback: T, aabb: Box2D.b2AABB) where T : Box2D.b2QueryWrapper
  open func rayCast<T>(callback: T, input: Box2D.b2RayCastInput) where T : Box2D.b2RayCastWrapper
  open func getTreeHeight() -> Swift.Int
  open func getTreeBalance() -> Swift.Int
  open func getTreeQuality() -> Box2D.b2Float
  open func shiftOrigin(_ newOrigin: Box2D.b2Vec2)
  open func queryCallback(_ proxyId: Swift.Int) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2PulleyJointDef : Box2D.b2JointDef {
  override public init()
  public convenience init(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, groundAnchorA: Box2D.b2Vec2, groundAnchorB: Box2D.b2Vec2, anchorA: Box2D.b2Vec2, anchorB: Box2D.b2Vec2, ratio: Box2D.b2Float)
  open func initialize(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, groundAnchorA: Box2D.b2Vec2, groundAnchorB: Box2D.b2Vec2, anchorA: Box2D.b2Vec2, anchorB: Box2D.b2Vec2, ratio: Box2D.b2Float)
  open var groundAnchorA: Box2D.b2Vec2
  open var groundAnchorB: Box2D.b2Vec2
  open var localAnchorA: Box2D.b2Vec2
  open var localAnchorB: Box2D.b2Vec2
  open var lengthA: Box2D.b2Float
  open var lengthB: Box2D.b2Float
  open var ratio: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2PulleyJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open var groundAnchorA: Box2D.b2Vec2 {
    get
  }
  open var groundAnchorB: Box2D.b2Vec2 {
    get
  }
  open var lengthA: Box2D.b2Float {
    get
  }
  open var lengthB: Box2D.b2Float {
    get
  }
  open var ratio: Box2D.b2Float {
    get
  }
  open var currentLengthA: Box2D.b2Float {
    get
  }
  open var currentLengthB: Box2D.b2Float {
    get
  }
  override open func dump()
  override open func shiftOrigin(_ newOrigin: Box2D.b2Vec2)
  @objc deinit
}
public protocol b2DestructionListener {
  func sayGoodbye(_ joint: Box2D.b2Joint)
  func sayGoodbye(_ fixture: Box2D.b2Fixture)
}
@_hasMissingDesignatedInitializers open class b2ContactFilter {
  @objc deinit
}
public struct b2ContactImpulse {
  public var normalImpulses: [Box2D.b2Float]
  public var tangentImpulses: [Box2D.b2Float]
  public var count: Swift.Int
}
public protocol b2ContactListener {
  func beginContact(_ contact: Box2D.b2Contact)
  func endContact(_ contact: Box2D.b2Contact)
  func preSolve(_ contact: Box2D.b2Contact, oldManifold: Box2D.b2Manifold)
  func postSolve(_ contact: Box2D.b2Contact, impulse: Box2D.b2ContactImpulse)
}
@_hasMissingDesignatedInitializers open class b2DefaultContactListener : Box2D.b2ContactListener {
  open func beginContact(_ contact: Box2D.b2Contact)
  open func endContact(_ contact: Box2D.b2Contact)
  open func preSolve(_ contact: Box2D.b2Contact, oldManifold: Box2D.b2Manifold)
  open func postSolve(_ contact: Box2D.b2Contact, impulse: Box2D.b2ContactImpulse)
  @objc deinit
}
public protocol b2QueryCallback {
  func reportFixture(_ fixture: Box2D.b2Fixture) -> Swift.Bool
}
public typealias b2QueryCallbackFunction = (Box2D.b2Fixture) -> Swift.Bool
public protocol b2RayCastCallback {
  func reportFixture(_ fixture: Box2D.b2Fixture, point: Box2D.b2Vec2, normal: Box2D.b2Vec2, fraction: Box2D.b2Float) -> Box2D.b2Float
}
public typealias b2RayCastCallbackFunction = (Box2D.b2Fixture, Box2D.b2Vec2, Box2D.b2Vec2, Box2D.b2Float) -> Box2D.b2Float
public var b2_minFloat: Swift.Float
public var b2_maxFloat: Swift.Float
public var b2_epsilon: Swift.Float
public var b2_pi: Swift.Float
public var b2_maxManifoldPoints: Swift.Int
public var b2_maxPolygonVertices: Swift.Int
public var b2_aabbExtension: Box2D.b2Float
public var b2_aabbMultiplier: Box2D.b2Float
public var b2_linearSlop: Box2D.b2Float
public var b2_angularSlop: (Swift.Float)
public var b2_polygonRadius: (Swift.Float)
public var b2_maxSubSteps: Swift.Int
public var b2_maxTOIContacts: Swift.Int
public var b2_velocityThreshold: Box2D.b2Float
public var b2_maxLinearCorrection: Box2D.b2Float
public var b2_maxAngularCorrection: (Swift.Float)
public var b2_maxTranslation: Box2D.b2Float
public var b2_maxTranslationSquared: (Swift.Float)
public var b2_maxRotation: (Swift.Float)
public var b2_maxRotationSquared: (Swift.Float)
public var b2_baumgarte: Box2D.b2Float
public var b2_toiBaugarte: Box2D.b2Float
public var b2_timeToSleep: Box2D.b2Float
public var b2_linearSleepTolerance: Box2D.b2Float
public var b2_angularSleepTolerance: (Swift.Float)
public struct b2Version {
}
public var b2_version: Box2D.b2Version
public enum b2BodyType : Swift.Int, Swift.CustomStringConvertible {
  case staticBody
  case kinematicBody
  case dynamicBody
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
open class b2BodyDef {
  public init()
  open var type: Box2D.b2BodyType
  open var position: Box2D.b2Vec2
  open var angle: Box2D.b2Float
  open var linearVelocity: Box2D.b2Vec2
  open var angularVelocity: Box2D.b2Float
  open var linearDamping: Box2D.b2Float
  open var angularDamping: Box2D.b2Float
  open var allowSleep: Swift.Bool
  open var awake: Swift.Bool
  open var fixedRotation: Swift.Bool
  open var bullet: Swift.Bool
  open var active: Swift.Bool
  open var userData: Swift.AnyObject?
  open var gravityScale: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2Body : Swift.CustomStringConvertible {
  @discardableResult
  open func createFixture(_ def: Box2D.b2FixtureDef) -> Box2D.b2Fixture
  @discardableResult
  open func createFixture(shape: Box2D.b2Shape, density: Box2D.b2Float) -> Box2D.b2Fixture
  open func destroyFixture(_ fixture: Box2D.b2Fixture)
  open func setTransform(position: Box2D.b2Vec2, angle: Box2D.b2Float)
  open var transform: Box2D.b2Transform {
    get
  }
  open var position: Box2D.b2Vec2 {
    get
  }
  open var angle: Box2D.b2Float {
    get
  }
  open var worldCenter: Box2D.b2Vec2 {
    get
  }
  open var localCenter: Box2D.b2Vec2 {
    get
  }
  open func setLinearVelocity(_ v: Box2D.b2Vec2)
  open var linearVelocity: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  open func setAngularVelocity(_ omega: Box2D.b2Float)
  open var angularVelocity: Box2D.b2Float {
    get
    set(newValue)
  }
  open func applyForce(_ force: Box2D.b2Vec2, point: Box2D.b2Vec2, wake: Swift.Bool)
  open func applyForceToCenter(_ force: Box2D.b2Vec2, wake: Swift.Bool)
  open func applyTorque(_ torque: Box2D.b2Float, wake: Swift.Bool)
  open func applyLinearImpulse(_ impulse: Box2D.b2Vec2, point: Box2D.b2Vec2, wake: Swift.Bool)
  open func applyAngularImpulse(_ impulse: Box2D.b2Float, wake: Swift.Bool)
  open var mass: Box2D.b2Float {
    get
  }
  open var inertia: Box2D.b2Float {
    get
  }
  open var massData: Box2D.b2MassData {
    get
    set(newValue)
  }
  open func setMassData(_ massData: Box2D.b2MassData)
  open func resetMassData()
  open func getWorldPoint(_ localPoint: Box2D.b2Vec2) -> Box2D.b2Vec2
  open func getWorldVector(_ localVector: Box2D.b2Vec2) -> Box2D.b2Vec2
  open func getLocalPoint(_ worldPoint: Box2D.b2Vec2) -> Box2D.b2Vec2
  open func getLocalVector(_ worldVector: Box2D.b2Vec2) -> Box2D.b2Vec2
  open func getLinearVelocityFromWorldPoint(_ worldPoint: Box2D.b2Vec2) -> Box2D.b2Vec2
  open func getLinearVelocityFromLocalPoint(_ localPoint: Box2D.b2Vec2) -> Box2D.b2Vec2
  open var linearDamping: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setLinearDamping(_ linearDamping: Box2D.b2Float)
  open var angularDamping: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setAngularDamping(_ angularDamping: Box2D.b2Float)
  open var gravityScale: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setGravityScale(_ scale: Box2D.b2Float)
  open func setType(_ type: Box2D.b2BodyType)
  open var type: Box2D.b2BodyType {
    get
    set(newValue)
  }
  open func setBullet(_ flag: Swift.Bool)
  open var isBullet: Swift.Bool {
    get
    set(newValue)
  }
  open func setSleepingAllowed(_ flag: Swift.Bool)
  open var isSleepingAllowed: Swift.Bool {
    get
    set(newValue)
  }
  open func setAwake(_ flag: Swift.Bool)
  open var isAwake: Swift.Bool {
    get
  }
  open func setActive(_ flag: Swift.Bool)
  open var isActive: Swift.Bool {
    get
  }
  open func setFixedRotation(_ flag: Swift.Bool)
  open var isFixedRotation: Swift.Bool {
    get
  }
  open func getFixtureList() -> Box2D.b2Fixture?
  open func getJointList() -> Box2D.b2JointEdge?
  open func getContactList() -> Box2D.b2ContactEdge?
  open func getNext() -> Box2D.b2Body?
  open var userData: Swift.AnyObject? {
    get
    set(newValue)
  }
  open func setUserData(_ data: Swift.AnyObject?)
  open var world: Box2D.b2World? {
    get
  }
  open func dump()
  open var description: Swift.String {
    get
  }
  @objc deinit
}
public struct b2Color : Swift.CustomStringConvertible {
  public var r: Swift.Float, g: Swift.Float, b: Swift.Float
  public init()
  public init(_ r: Swift.Float, _ g: Swift.Float, _ b: Swift.Float)
  public mutating func set(_ r: Swift.Float, _ g: Swift.Float, _ b: Swift.Float)
  public var description: Swift.String {
    get
  }
}
public struct b2DrawFlags {
  public static var shapeBit: Swift.UInt32
  public static var jointBit: Swift.UInt32
  public static var aabbBit: Swift.UInt32
  public static var pairBit: Swift.UInt32
  public static var centerOfMassBit: Swift.UInt32
}
public protocol b2Draw {
  var flags: Swift.UInt32 { get }
  func drawPolygon(_ vertices: [Box2D.b2Vec2], _ color: Box2D.b2Color)
  func drawSolidPolygon(_ vertices: [Box2D.b2Vec2], _ color: Box2D.b2Color)
  func drawCircle(_ center: Box2D.b2Vec2, _ radius: Box2D.b2Float, _ color: Box2D.b2Color)
  func drawSolidCircle(_ center: Box2D.b2Vec2, _ radius: Box2D.b2Float, _ axis: Box2D.b2Vec2, _ color: Box2D.b2Color)
  func drawSegment(_ p1: Box2D.b2Vec2, _ p2: Box2D.b2Vec2, _ color: Box2D.b2Color)
  func drawTransform(_ xf: Box2D.b2Transform)
}
public struct b2MassData : Swift.CustomStringConvertible {
  public var mass: Box2D.b2Float
  public var center: Box2D.b2Vec2
  public var I: Box2D.b2Float
  public var description: Swift.String {
    get
  }
}
public enum b2ShapeType : Swift.Int, Swift.CustomStringConvertible {
  case circle
  case edge
  case polygon
  case chain
  case typeCount
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
open class b2Shape : Swift.CustomStringConvertible {
  public init()
  open func clone() -> Box2D.b2Shape
  open var type: Box2D.b2ShapeType {
    get
  }
  open var childCount: Swift.Int {
    get
  }
  open func testPoint(transform: Box2D.b2Transform, point: Box2D.b2Vec2) -> Swift.Bool
  open func rayCast(_ output: inout Box2D.b2RayCastOutput, input: Box2D.b2RayCastInput, transform: Box2D.b2Transform, childIndex: Swift.Int) -> Swift.Bool
  open func computeAABB(_ aabb: inout Box2D.b2AABB, transform: Box2D.b2Transform, childIndex: Swift.Int)
  open func computeMass(density: Box2D.b2Float) -> Box2D.b2MassData
  open var description: Swift.String {
    get
  }
  open var radius: Box2D.b2Float {
    get
    set(newValue)
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2PolygonAndCircleContact : Box2D.b2Contact {
  override open func evaluate(_ manifold: inout Box2D.b2Manifold, _ xfA: Box2D.b2Transform, _ xfB: Box2D.b2Transform)
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2PolygonShape : Box2D.b2Shape {
  override public init()
  override open func clone() -> Box2D.b2Shape
  override open var childCount: Swift.Int {
    get
  }
  open func set(vertices: [Box2D.b2Vec2])
  open func setAsBox(halfWidth hx: Box2D.b2Float, halfHeight hy: Box2D.b2Float)
  open func setAsBox(halfWidth hx: Box2D.b2Float, halfHeight hy: Box2D.b2Float, center: Box2D.b2Vec2, angle: Box2D.b2Float)
  override open func testPoint(transform: Box2D.b2Transform, point p: Box2D.b2Vec2) -> Swift.Bool
  override open func rayCast(_ output: inout Box2D.b2RayCastOutput, input: Box2D.b2RayCastInput, transform xf: Box2D.b2Transform, childIndex: Swift.Int) -> Swift.Bool
  override open func computeAABB(_ aabb: inout Box2D.b2AABB, transform: Box2D.b2Transform, childIndex: Swift.Int)
  override open func computeMass(density: Box2D.b2Float) -> Box2D.b2MassData
  open var vertexCount: Swift.Int {
    get
  }
  open func vertex(_ index: Swift.Int) -> Box2D.b2Vec2
  open func validate() -> Swift.Bool
  open var vertices: Box2D.b2Array<Box2D.b2Vec2> {
    get
  }
  open var count: Swift.Int {
    get
  }
  override open var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2CircleContact : Box2D.b2Contact {
  override open func evaluate(_ manifold: inout Box2D.b2Manifold, _ xfA: Box2D.b2Transform, _ xfB: Box2D.b2Transform)
  @objc deinit
}
public struct b2Profile {
  public init()
  public var step: Box2D.b2Float
  public var collide: Box2D.b2Float
  public var solve: Box2D.b2Float
  public var solveInit: Box2D.b2Float
  public var solveVelocity: Box2D.b2Float
  public var solvePosition: Box2D.b2Float
  public var broadphase: Box2D.b2Float
  public var solveTOI: Box2D.b2Float
}
public struct b2TimeStep {
}
open class b2Array<T> : Swift.CustomStringConvertible {
  public init()
  public init(count: Swift.Int, repeatedValue: T)
  open func reserveCapacity(_ minimumCapacity: Swift.Int)
  open func append(_ newElement: T)
  open func insert(_ newElement: T, atIndex i: Swift.Int)
  open func removeAtIndex(_ index: Swift.Int) -> T
  open func removeLast()
  open func removeAll(_ keepCapacity: Swift.Bool = true)
  open subscript(index: Swift.Int) -> T {
    get
    set(newValue)
  }
  open func clone() -> Box2D.b2Array<T>
  open var count: Swift.Int {
    get
  }
  open var description: Swift.String {
    get
  }
  @objc deinit
}
public struct b2Position {
}
public struct b2Velocity {
}
public struct b2SolverData {
}
@_inheritsConvenienceInitializers open class b2MotorJointDef : Box2D.b2JointDef {
  override public init()
  public convenience init(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body)
  open func initialize(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body)
  open var linearOffset: Box2D.b2Vec2
  open var angularOffset: Box2D.b2Float
  open var maxForce: Box2D.b2Float
  open var maxTorque: Box2D.b2Float
  open var correctionFactor: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2MotorJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open func setLinearOffset(_ linearOffset: Box2D.b2Vec2)
  open var linearOffset: Box2D.b2Vec2 {
    get
    set(newValue)
  }
  open func setAngularOffset(_ angularOffset: Box2D.b2Float)
  open var angularOffset: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setMaxForce(_ force: Box2D.b2Float)
  open var maxForce: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setMaxTorque(_ torque: Box2D.b2Float)
  open var maxTorque: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setCorrectionFactor(_ factor: Box2D.b2Float)
  open var correctionFactor: Box2D.b2Float {
    get
    set(newValue)
  }
  override open func dump()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2EdgeAndPolygonContact : Box2D.b2Contact {
  override open func evaluate(_ manifold: inout Box2D.b2Manifold, _ xfA: Box2D.b2Transform, _ xfB: Box2D.b2Transform)
  @objc deinit
}
public struct b2TOIInput {
  public init()
  public var proxyA: Box2D.b2DistanceProxy
  public var proxyB: Box2D.b2DistanceProxy
  public var sweepA: Box2D.b2Sweep
  public var sweepB: Box2D.b2Sweep
  public var tMax: Box2D.b2Float
}
public struct b2TOIOutput {
  public enum State : Swift.CustomStringConvertible {
    case unknown
    case failed
    case overlapped
    case touching
    case separated
    public var description: Swift.String {
      get
    }
    public static func == (a: Box2D.b2TOIOutput.State, b: Box2D.b2TOIOutput.State) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public init()
  public var state: Box2D.b2TOIOutput.State
  public var t: Box2D.b2Float
}
public func b2TimeOfImpact(_ output: inout Box2D.b2TOIOutput, input: Box2D.b2TOIInput)
public var b2_toiTime: Box2D.b2Float, b2_toiMaxTime: Box2D.b2Float
public var b2_toiCalls: Swift.Int, b2_toiIters: Swift.Int, b2_toiMaxIters: Swift.Int
public var b2_toiRootIters: Swift.Int, b2_toiMaxRootIters: Swift.Int
@_inheritsConvenienceInitializers open class b2RopeJointDef : Box2D.b2JointDef {
  override public init()
  open var localAnchorA: Box2D.b2Vec2
  open var localAnchorB: Box2D.b2Vec2
  open var maxLength: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2RopeJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open var localAnchorA: Box2D.b2Vec2 {
    get
  }
  open var localAnchorB: Box2D.b2Vec2 {
    get
  }
  open func setMaxLength(_ length: Box2D.b2Float)
  open var maxLength: Box2D.b2Float {
    get
    set(newValue)
  }
  open var limitState: Box2D.b2LimitState {
    get
  }
  override open func dump()
  @objc deinit
}
public func b2MixFriction(_ friction1: Box2D.b2Float, friction2: Box2D.b2Float) -> Box2D.b2Float
public func b2MixRestitution(_ restitution1: Box2D.b2Float, restitution2: Box2D.b2Float) -> Box2D.b2Float
public struct b2ContactRegister {
}
@_hasMissingDesignatedInitializers open class b2ContactEdge {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2Contact {
  open var manifold: Box2D.b2Manifold {
    get
  }
  open var worldManifold: Box2D.b2WorldManifold {
    get
  }
  open var isTouching: Swift.Bool {
    get
  }
  open func setEnabled(_ flag: Swift.Bool)
  open var isEnabled: Swift.Bool {
    get
  }
  open func getNext() -> Box2D.b2Contact?
  open var fixtureA: Box2D.b2Fixture {
    get
  }
  open var childIndexA: Swift.Int {
    get
  }
  open var fixtureB: Box2D.b2Fixture {
    get
  }
  open var childIndexB: Swift.Int {
    get
  }
  open func setFriction(_ friction: Box2D.b2Float)
  open var friction: Box2D.b2Float {
    get
    set(newValue)
  }
  open func resetFriction()
  open func setRestitution(_ restitution: Box2D.b2Float)
  open var restitution: Box2D.b2Float {
    get
    set(newValue)
  }
  open func resetRestitution()
  open func setTangentSpeed(_ speed: Box2D.b2Float)
  open var tangentSpeed: Box2D.b2Float {
    get
  }
  open func evaluate(_ manifold: inout Box2D.b2Manifold, _ xfA: Box2D.b2Transform, _ xfB: Box2D.b2Transform)
  @objc deinit
}
open class b2Timer {
  public init()
  open func reset()
  open var milliseconds: Box2D.b2Float {
    get
  }
  @objc deinit
}
public struct b2GrowableStack<T> {
}
open class b2DistanceProxy : Swift.CustomStringConvertible {
  public init()
  public init(shape: Box2D.b2Shape, index: Swift.Int)
  open func set(_ shape: Box2D.b2Shape, _ index: Swift.Int)
  open func getSupport(_ d: Box2D.b2Vec2) -> Swift.Int
  open func getSupportVertex(_ d: Box2D.b2Vec2) -> Box2D.b2Vec2
  open func getVertexCount() -> Swift.Int
  open func getVertex(_ index: Swift.Int) -> Box2D.b2Vec2
  open var description: Swift.String {
    get
  }
  open var m_buffer: Box2D.b2Array<Box2D.b2Vec2>
  open var m_vertices: Box2D.b2Array<Box2D.b2Vec2>?
  open var m_count: Swift.Int
  open var m_radius: Box2D.b2Float
  @objc deinit
}
public struct b2SimplexCache : Swift.CustomStringConvertible {
  public init()
  public var metric: Box2D.b2Float
  public var count: Swift.UInt16
  public var indexA: [Swift.UInt8]
  public var indexB: [Swift.UInt8]
  public var description: Swift.String {
    get
  }
}
public struct b2DistanceInput : Swift.CustomStringConvertible {
  public init()
  public var description: Swift.String {
    get
  }
  public var proxyA: Box2D.b2DistanceProxy
  public var proxyB: Box2D.b2DistanceProxy
  public var transformA: Box2D.b2Transform
  public var transformB: Box2D.b2Transform
  public var useRadii: Swift.Bool
}
public struct b2DistanceOutput : Swift.CustomStringConvertible {
  public init()
  public var description: Swift.String {
    get
  }
  public var pointA: Box2D.b2Vec2
  public var pointB: Box2D.b2Vec2
  public var distance: Box2D.b2Float
  public var iterations: Swift.Int
}
public func b2Distance(_ output: inout Box2D.b2DistanceOutput, cache: inout Box2D.b2SimplexCache, input: Box2D.b2DistanceInput)
public var b2_gjkCalls: Swift.Int, b2_gjkIters: Swift.Int, b2_gjkMaxIters: Swift.Int
public var b2_nullFeature: Swift.Int32
public enum b2ContactFeatureType : Swift.UInt8, Swift.CustomStringConvertible {
  case vertex
  case face
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.UInt8
  public init?(rawValue: Swift.UInt8)
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct b2ContactFeature : Swift.CustomStringConvertible {
  public var indexA: Swift.UInt8
  public var indexB: Swift.UInt8
  public var typeA: Box2D.b2ContactFeatureType
  public var typeB: Box2D.b2ContactFeatureType
  public init()
  public mutating func setZero()
  public var description: Swift.String {
    get
  }
}
public func == (lhs: Box2D.b2ContactFeature, rhs: Box2D.b2ContactFeature) -> Swift.Bool
open class b2ManifoldPoint : Swift.CustomStringConvertible {
  open var localPoint: Box2D.b2Vec2
  open var normalImpulse: Box2D.b2Float
  open var tangentImpulse: Box2D.b2Float
  open var id: Box2D.b2ContactFeature
  public init()
  public init(copyFrom: Box2D.b2ManifoldPoint)
  open var description: Swift.String {
    get
  }
  @objc deinit
}
public enum b2ManifoldType : Swift.CustomStringConvertible {
  case circles
  case faceA
  case faceB
  public var description: Swift.String {
    get
  }
  public static func == (a: Box2D.b2ManifoldType, b: Box2D.b2ManifoldType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
open class b2Manifold : Swift.CustomStringConvertible {
  open var points: [Box2D.b2ManifoldPoint]
  open var localNormal: Box2D.b2Vec2
  open var localPoint: Box2D.b2Vec2
  open var type: Box2D.b2ManifoldType
  open var pointCount: Swift.Int {
    get
  }
  public init()
  public init(copyFrom: Box2D.b2Manifold)
  open var description: Swift.String {
    get
  }
  @objc deinit
}
open class b2WorldManifold : Swift.CustomStringConvertible {
  public init()
  open var normal: Box2D.b2Vec2
  open var points: [Box2D.b2Vec2]
  open var separations: [Swift.Float]
  open func initialize(manifold: Box2D.b2Manifold, transformA xfA: Box2D.b2Transform, radiusA: Box2D.b2Float, transformB xfB: Box2D.b2Transform, radiusB: Box2D.b2Float)
  open var description: Swift.String {
    get
  }
  @objc deinit
}
public enum b2PointState : Swift.CustomStringConvertible {
  case nullState
  case addState
  case persistState
  case removeState
  public var description: Swift.String {
    get
  }
  public static func == (a: Box2D.b2PointState, b: Box2D.b2PointState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public func b2GetPointStates(manifold1: Box2D.b2Manifold, manifold2: Box2D.b2Manifold) -> (state1: [Box2D.b2PointState], state2: [Box2D.b2PointState])
public struct b2ClipVertex : Swift.CustomStringConvertible {
  public init()
  public var v: Box2D.b2Vec2
  public var id: Box2D.b2ContactFeature
  public var description: Swift.String {
    get
  }
}
public struct b2RayCastInput : Swift.CustomStringConvertible {
  public init()
  public var p1: Box2D.b2Vec2, p2: Box2D.b2Vec2
  public var maxFraction: Box2D.b2Float
  public var description: Swift.String {
    get
  }
}
public struct b2RayCastOutput : Swift.CustomStringConvertible {
  public init()
  public var normal: Box2D.b2Vec2
  public var fraction: Box2D.b2Float
  public var description: Swift.String {
    get
  }
}
public struct b2AABB : Swift.CustomStringConvertible {
  public var lowerBound: Box2D.b2Vec2
  public var upperBound: Box2D.b2Vec2
  public init()
  public init(lowerBound: Box2D.b2Vec2, upperBound: Box2D.b2Vec2)
  public var isValid: Swift.Bool {
    get
  }
  public var center: Box2D.b2Vec2 {
    get
  }
  public var extents: Box2D.b2Vec2 {
    get
  }
  public var perimeter: Box2D.b2Float {
    get
  }
  public mutating func combine(_ aabb: Box2D.b2AABB)
  public mutating func combine(_ aabb1: Box2D.b2AABB, _ aabb2: Box2D.b2AABB)
  public func contains(_ aabb: Box2D.b2AABB) -> Swift.Bool
  public func rayCast(_ input: Box2D.b2RayCastInput) -> Box2D.b2RayCastOutput?
  public var description: Swift.String {
    get
  }
}
public func b2ClipSegmentToLine(inputVertices vIn: [Box2D.b2ClipVertex], normal: Box2D.b2Vec2, offset: Box2D.b2Float, vertexIndexA: Swift.Int) -> [Box2D.b2ClipVertex]
public func b2TestOverlap(shapeA: Box2D.b2Shape, indexA: Swift.Int, shapeB: Box2D.b2Shape, indexB: Swift.Int, transformA xfA: Box2D.b2Transform, transformB xfB: Box2D.b2Transform) -> Swift.Bool
public func b2TestOverlap(_ a: Box2D.b2AABB, _ b: Box2D.b2AABB) -> Swift.Bool
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class b2ChainAndPolygonContact : Box2D.b2Contact {
  override open func evaluate(_ manifold: inout Box2D.b2Manifold, _ xfA: Box2D.b2Transform, _ xfB: Box2D.b2Transform)
  @objc deinit
}
@_inheritsConvenienceInitializers open class b2RevoluteJointDef : Box2D.b2JointDef {
  override public init()
  public convenience init(bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, anchor: Box2D.b2Vec2)
  open func initialize(_ bodyA: Box2D.b2Body, bodyB: Box2D.b2Body, anchor: Box2D.b2Vec2)
  open var localAnchorA: Box2D.b2Vec2
  open var localAnchorB: Box2D.b2Vec2
  open var referenceAngle: Box2D.b2Float
  open var enableLimit: Swift.Bool
  open var lowerAngle: Box2D.b2Float
  open var upperAngle: Box2D.b2Float
  open var enableMotor: Swift.Bool
  open var motorSpeed: Box2D.b2Float
  open var maxMotorTorque: Box2D.b2Float
  @objc deinit
}
@_hasMissingDesignatedInitializers open class b2RevoluteJoint : Box2D.b2Joint {
  override open var anchorA: Box2D.b2Vec2 {
    get
  }
  override open var anchorB: Box2D.b2Vec2 {
    get
  }
  open var localAnchorA: Box2D.b2Vec2 {
    get
  }
  open var localAnchorB: Box2D.b2Vec2 {
    get
  }
  open var referenceAngle: Box2D.b2Float {
    get
  }
  open var jointAngle: Box2D.b2Float {
    get
  }
  open var jointSpeed: Box2D.b2Float {
    get
  }
  open var isLimitEnabled: Swift.Bool {
    get
    set(newValue)
  }
  open func enableLimit(_ flag: Swift.Bool)
  open var lowerLimit: Box2D.b2Float {
    get
  }
  open var upperLimit: Box2D.b2Float {
    get
  }
  open func setLimits(lower: Box2D.b2Float, upper: Box2D.b2Float)
  open var isMotorEnabled: Swift.Bool {
    get
  }
  open func enableMotor(_ flag: Swift.Bool)
  open func setMotorSpeed(_ speed: Box2D.b2Float)
  open var motorSpeed: Box2D.b2Float {
    get
    set(newValue)
  }
  open func setMaxMotorTorque(_ torque: Box2D.b2Float)
  open var maxMotorTorque: Box2D.b2Float {
    get
    set(newValue)
  }
  override open func getReactionForce(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Vec2
  override open func getReactionTorque(inverseTimeStep inv_dt: Box2D.b2Float) -> Box2D.b2Float
  open func getMotorTorque(_ inv_dt: Box2D.b2Float) -> Box2D.b2Float
  override open func dump()
  @objc deinit
}
